// 索引从1开始，W是重量，n是物品
int backPack(int w, int n, vector<int> &wt, vector<int> &val) {
    vector<vector<int>> dp(N + 1, vector<int>(W + 1, 0));
    for (int i = 1; i <= n, ++i) {
        for (int j = 1; j < w, ++j) {
            // 当前背包容量不足，只能选择不装
            if (j - wt[i - 1] < 0)
                dp[i][j] = dp[i - 1][j];
            dp[i][j] = max(
                    // 不放
                    dp[i - 1][j],
                    // 放，在装第i个物品的前提下，背包能装的最大价值时多少
                    dp[i - 1][j - wt(i - 1)] + val(i - 1);
            );
        }
    }
    return dp[n][w];
}

重点在放的时候的dp处理

对于分割等和子集问题
可以把他理解成为背包问题，以sum/2为目标，看能否正好装满
dp[i][j]表示 对于前i个物品，当前背包容量为j时，若x为true则说明可以恰好将背包装满，false则说明不能恰好装满
base case：
dp[...][0] = true;
dp[0][...] = false;

转移方程
索引从0开始 i从1开始
dp = 不装 || 装
dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]]

完全背包问题
物品无限的背包问题
例：给出几种硬币可能出现的值，每种硬币无限个，求能凑成target的方法数
dp[i][j] 表示 只使用前i个物品，当背包容量为j时，有dp种方法可以装满背包
base case:
dp[0][...] = 0;
dp[...][0] = 1;

转移方程
i从1开始，索引从0开始，coins[i-1]表示第i个硬币的面值
// 不使用+使用
// 使用时考虑如何凑出j-coins[i-1]的值
dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]]