关键点在于这个是有三个状态的dp
第i天，最多还可交易k次，当前是否持有0/1

vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(2, 0)));
// 不动，卖出
dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]);
// 不动，买入
dp[i][k][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i]);

base case：
    dp[-1][k][b] = 0;
    dp[i][0][b] = 0;

k=1时 可以简化掉所有k，dp[i-1][0][0] = 0
    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
    dp[i][1] = max(dp[i - 1][1], - prices[i]);

k=+inf 认为k和k-1是一样的，不需要记录k了，简化掉k
    dp[i][0] = max(dp[i - 1][k][0], dp[i - 1][1] + prices[i]);
    dp[i][1] = max(dp[i - 1][k][1], dp[i - 1][0] - prices[i]);

k=+inf with cooldown 每次卖出后需要等一天，买入转移时找i-2而不是i-1
    dp[i][0] = max(dp[i - 1][k][0], dp[i - 1][1] + prices[i]);
    dp[i][1] = max(dp[i - 1][k][1], dp[i - 2][0] - prices[i]);

k=+inf with fee 每次交易收手续费，交易时扣除就好，在买入和卖出时减去是一样的
    dp[i][0] = max(dp[i - 1][k][0], dp[i - 1][1] + prices[i]);
    dp[i][1] = max(dp[i - 1][k][1], dp[i - 1][0] - prices[i] - fee);

k=2 这时记得要遍历，只要k不等于1或inf，也就是不能约去的情况，一定要记得遍历
如果k很大，应注意一次交易由买入和卖出构成，至少需要两天。所以k应该不超过n/2，如果超过，就没有约束作用了，相当于k=+inf
    for (int k = 1; k < max_k; ++k) {
        if (i - 1 = -1) {
            // 处理base case
        }
        dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]);
        dp[i][k][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i]);
    }